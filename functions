# замыкания!
def out(list):
    def wrapper():
        return list[0] + list[1]
    return wrapper
    # замыкание функции

sp = [1,2,3,4]
clos = out(sp)
sp[0] = 5
print(clos())
# с помощью скобки мы передаем функции не копии, а сами параметры
# поэтому при изменении sp мы видим измененный результат функции.

# декораторы!
def myDecorator(func1, func2):
# декоратор.
    def wrapper():
        # вложенная функция!!
        print('before: ')
        func1()
        print('after: ')
        func2()
    return wrapper
    # замыкание функции.

def firstFunction():
    print('some function!')
def secondFunction():
    print('more function!')

my = myDecorator(firstFunction, secondFunction)
print(my())
# первый способ декорирования.

def myDecorator(func):
    def wrapper(a):
        print('before:')
        print(func(a))
        print('after:')
        print(func(a) * 2)
    return wrapper

@myDecorator
def myFunc(a):
    return a ** 2
myFunc(7)
# второй способ декорирования.

def newFunc(func):
    def wrapper():
        for word in func():
            print(word.upper() + '!', end=' ')
        return "\n20 слов ИНФОРМАТИКА!\n"
    return wrapper

@newFunc
def function():
    list = ['Информатика' for i in range(20)]
    return list
print(function())
# пример работы с декоратором, преобразует 20 слов информатика в ИНФОРМАТИКА!

def dec1(func):
    def wrapper():
        return func().upper() + '!'
    return wrapper
def dec2(func):
    def wrapper():
        return func() + '?'
    return wrapper

@dec1
@dec2
def myfunc():
    return 'kakish'
print(myfunc())
# 2 декоратора, применяются снизу вверх!

from time import *

def dec(func):
    def wrapper(userInt):
        begin = time()
        function = func(userInt)
        end = time()
        print(f'Время выполнения функции: {end - begin}')
        return function
    return wrapper
@dec
def fuct(userInt):
    for i in range(1, userInt):
        userInt *= i
    return userInt
userInt = int(input('Введите небольшое положительное число: '))
print(f'Результат функции: {fuct(userInt)}')
# задачка на подсчет времени выполнения функции факториала.

# анонимные функции и важные функции (высшего порядка)!
message = lambda: print('some message')
message()
# лямбда функция выполняет действие print.
message = lambda n: n ** 3
print(message(4))
# лямбда функция возвращает куб числа n

products = [
    {
        'Название': 'Молоко',
        'Цена': 75,
        'Кол-во': 20
    },
    {
        'Название': 'Хлеб',
        'Цена': 35,
        'Кол-во': 45
    },
    {
        'Название': 'Яйца',
        'Цена': 200,
        'Кол-во': 7
    }
]
sortedProducts = sorted(products, key=lambda item: item['Кол-во'], reverse=True)
print(sortedProducts)
# сортировка товаров по количеству.

matrix = [[1, 34], [1, 25], [34, 65], [22, 73], [42, 51]]
print(sorted(matrix, key=lambda list: list[0]))
# сортировка по первый числам списков.
print(sorted(matrix, key=lambda list: list[-1]))
# сортировка по вторым числам списков.
print(sorted(matrix, key=lambda list: list[0] + list[-1]))
# сортировка по сумме чисел списков.

def func(num1):
    return lambda num2: num2 * num1
double = func(10)
totalNum = double(5)
print(totalNum)
# использование lambda внутри функции.

numbers = [2,1,3,6,78,32,67,12,94,15,875,24,741]

res1 = list(filter(lambda x: x>20, numbers))
print(*res1, sep=' ')

res2 = [num for num in numbers if num > 20]
print(*res2, sep=' ')
# два способа вывести все элементы, большие чем 20.

allNums = list(map(int, str(38383838)))
sumNums = sum(map(int, str(38383838)))
print(allNums, sumNums, sep='\n')
# применяем str(), чтобы создать итерируемую строку, к каждому символу которой мы применяем метод int()
# выводим строку в виде списка, а также выводим сумму цифр этой строки.

nums = [1,2,3,4,5,6,7,8,9]

print(list(map(lambda num: num ** 2, nums)))
# выведет квадраты чисел списка nums.

from functools import *
print(reduce(lambda a, b: a * b, nums, 666))
# reduce позволяет вывести результат выполнения ламбда функции одним значением (начиная с числа 666).

randomStr = 'sdkfjjdksj45345jkdkj83dj32d328d23jg293g'
userList = list(randomStr)
print(list(filter(lambda x: x in '0123456789', userList)))
# 1 способ.
numsInList = [num for num in userList if num in '0123456789']
print(numsInList)
# 2 способ.
# зад.1

randomList = [31,2,42,94,6,73,4,8,3,67]
newList = list(map(lambda x: x * 2 if x % 2 == 0 else x * 3, randomList))
print(newList)
# зад.2
